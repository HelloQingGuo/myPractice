Modules
	
	Core, Shared and Feature (probably need more than one feature module)

	Core: All services which have to have one and only one instance per application (singleton services) should be implemented here.

	Shared:
		All the “dumb” components and pipes should be implemented here. These components don’t import and inject services from core or other features in their constructors. They should receive all data though attributes in the template of the component using them.
		It is also the perfect place to import and re-export Angular Material components.

	Feature:
			Create multiple feature modules for every independent feature of our application. Feature modules should only import services from CoreModule. If feature module A needs to import service from feature module B consider moving that service into core.

Shared Modules 

	The most common way to get a hold of shared services is through Angular dependency injection, rather than through the module system (importing a module will result in a new service instance, which is not a typical usage).

Create Strict Module Boundaries

	Export resources via index.js in which we create a window to expose the resources to the outside world. It increases the maintainability of our application especially when there are dependencies existing across different resources.

	Bad
		
		import { AuthService } from '../../providers/auth/auth.service';
		

	Good
		
		Under the `providers` folder, put a index.ts file:
			export { ApiService } from './api/api.service';
			export { AuthService } from './auth/auth.service';
		import { AuthService } from '../../providers';
	
	Even if authService is refactored in the future, there will be no impact on the modules which is using AuthService.


Using an interface for data models

